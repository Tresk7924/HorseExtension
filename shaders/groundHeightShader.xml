<?xml version="1.0" encoding="utf-8"?>
<CustomShader version="4">
    <Parameters>
        <Parameter name="dirtAndTextureUVScale" target="dirtAndTextureUVScale" type="float4"/>
        <Parameter name="alphaBlendStartEnd" target="alphaBlendStartEnd" type="float4" defaultValue="75 80"/>
        <Parameter name="terrainSizeInvSizeScaleXZScaleY" target="terrainSizeInvSizeScaleXZScaleY" type="float4"/>
    </Parameters>
    <Textures>
        <Texture name="blendMap" defaultColorProfile="linearRGB" defaultFilename="$data/shared/groundHeightNoise.png"/>
        <Texture name="heightNoiseMap" defaultColorProfile="linearRGB" defaultFilename="$data/shared/groundHeightNoise.png"/>
        <Texture name="baseMap" type="2dArray"/>
        <Texture name="normalMap" type="2dArray"/>
    </Textures>
    <VertexAttributes>
        <IgnoredVertexAttribute name="tangent" group="base"/>
    </VertexAttributes>
    <LodLevel startDistance="0" subsequentPassForceMode="use">
        <CodeInjections>
            <CodeInjection position="SHARED_START"><![CDATA[
// Channel 1: Ground Type

// This should to match with the max height value defined in the i3d
#define MAX_DELTA_HEIGHT 4.0


//#define STATIC_TEST_GEOMETRY

#if defined(STATIC_TEST_GEOMETRY)
#define GET_DELTA_HEIGHT (In.position.y < 0.001 ? 0 : In.position.y)
#define TERRAIN_DETAIL_CHANNEL_1
#define TERRAIN_DETAIL_TEXTURE_SIZE 16
#else
#define GET_DELTA_HEIGHT (In.normal.w*MAX_DELTA_HEIGHT)
#endif

#if defined(DIFFUSE) && defined(TERRAIN_DETAIL_CHANNEL_1) // if diffuse is defined, we are in color output mode
#define USE_GROUND_SHADER_COLOR
#endif

#define INTEGER_POSITION

// We are going to define our own albedo and normal map handling
#undef ALBEDO_MAP
#undef NORMAL_MAP
// We do our own parallax mapping, so disable it in the base shader
#undef PARALLAX_MAP
#undef PARALLAX_MAPPING

// We do our own alpha testing
#undef ALPHA_TESTED
]]></CodeInjection>
            <CodeInjection position="SAMPLERS"><![CDATA[
// Overwrite the base shader baseMap and normalMap
#if defined(STATIC_TEST_GEOMETRY)
sampler2D baseMap;
sampler2D normalMap;
#else
sampler2DArray baseMap;
sampler2DArray normalMap;
#endif
sampler2D blendMap; // X: Ground Type
sampler2D heightNoiseMap;
]]></CodeInjection>
            <CodeInjection position="MATERIALINFO"><![CDATA[
uniform float4 dirtAndTextureUVScale;
uniform float2 alphaBlendStartEnd;
uniform float4 terrainSizeInvSizeScaleXZScaleY;
]]></CodeInjection>
            <CodeInjection position="GET_POSITION_VS"><![CDATA[
float3 inPos = float3(In.position.xyz);
float3  pos;
#if defined(STATIC_TEST_GEOMETRY)
    pos = inPos;
#else
    pos.xz = (inPos.xz - 0.5 * terrainSizeInvSizeScaleXZScaleY.x) * terrainSizeInvSizeScaleXZScaleY.z;
    pos.y = (inPos.y + 32768) * terrainSizeInvSizeScaleXZScaleY.w;
#endif
pos.y += 0.003; // offset to avoid z-fights

float deltaHeight = GET_DELTA_HEIGHT;
if (deltaHeight > 0.0) {
    // Offset by 0.05 at the ground and offset 0 at 1
    pos.y += 0.05 * saturate(1 - deltaHeight);
}

return pos;
]]></CodeInjection>
            <CodeInjection position="GET_NORMAL_VS"><![CDATA[
    // convert from ubyte to [-1,1] range
    return In.normal.xyz - 0.5;
]]></CodeInjection>
            <CodeInjection position="GET_TANGENT_VS"><![CDATA[
#if defined(USE_GROUND_SHADER_COLOR)
    return cross(In.normal.xyz-0.5, float3(0,0,1));
#else
    return float3(1,0,0);
#endif
]]></CodeInjection>
            <CodeInjection position="GET_BITANGENT_VS"><![CDATA[
#if defined(USE_GROUND_SHADER_COLOR)
    float3 tangent = getTangent(In);
    return cross(tangent, In.normal.xyz-0.5);
#else
    return float3(0,0,1);
#endif
]]></CodeInjection>
            <CodeInjection position="GET_BITANGENT_SIDE_VS"><![CDATA[
return -1.0;
]]></CodeInjection>
            <CodeInjection position="POST_SET_TEXCOORDS_VS"><![CDATA[
Out.defaultTexCoords = position.xz*dirtAndTextureUVScale.z;
Out.dirtTexCoords = position.xz*dirtAndTextureUVScale.xy;

Out.blendMapTexCoords = In.texCoords0.xy;
#if defined(STATIC_TEST_GEOMETRY)
Out.blendMapTexCoords = getDefaultTexCoords(In);
#endif
]]></CodeInjection>
            <CodeInjection position="VS_OUTPUT"><![CDATA[
float alphaScale : TEXCOORDn;
float deltaHeight: TEXCOORDn;
float2 dirtTexCoords : TEXCOORDn;

float2 blendMapTexCoords : TEXCOORDn;
float2 globalMaskTexCoords : TEXCOORDn;
]]></CodeInjection>
            <CodeInjection position="VS_END"><![CDATA[
Out.alphaScale = saturate((length(viewDir)-(alphaBlendStartEnd.x))/(alphaBlendStartEnd.x-alphaBlendStartEnd.y));
float deltaHeight = GET_DELTA_HEIGHT;
if (deltaHeight > 0.0) {
    // Limit the height so that flat heaps will have a shorter blending and steep heaps have a longer blending than what they would have otherwise
    deltaHeight = clamp(deltaHeight, 0.01, 0.1); // with 25cm this about 11 to 22°
}
Out.deltaHeight = deltaHeight;
Out.globalMaskTexCoords = 0.25 * position.xz;
]]></CodeInjection>
            <CodeInjection position="FS_GLOBALS"><![CDATA[
float groundType;
    float heightNoise;
#if defined(USE_GROUND_SHADER_COLOR)
    float dirt;
#endif
]]></CodeInjection>
            <CodeInjection position="START_FS"><![CDATA[
#if defined(TERRAIN_DETAIL_CHANNEL_1)
    const float textureSize = TERRAIN_DETAIL_TEXTURE_SIZE;
    const float texelSize = 1.0 / textureSize;

#if defined(STATIC_TEST_GEOMETRY)
    float2 blendUV = (floor(In.vs.blendMapTexCoords*(textureSize-1))+0.5) *texelSize;
#else
    // The terrain detail blend map is set to "nearest" so we don't need to do this manually here
    float2 blendUV = In.vs.blendMapTexCoords;
#endif

    globals.groundType = tex2D(blendMap, blendUV).x;
    if (globals.groundType == 0) {
        globals.groundType = tex2D(blendMap, blendUV + float2(texelSize, texelSize)).x;
        if (globals.groundType == 0) {
            globals.groundType = tex2D(blendMap, blendUV + float2(texelSize, 0)).x;
            if (globals.groundType == 0) {
                globals.groundType = tex2D(blendMap, blendUV + float2(0, texelSize)).x;
            }
        }
    }
    globals.groundType *= 127;

#else
    globals.groundType = 0;
#endif


#if defined(USE_GROUND_SHADER_COLOR)
    globals.dirt = tex2D(heightNoiseMap, In.vs.dirtTexCoords).y*1.2;
#endif
    globals.heightNoise = tex2D(heightNoiseMap, In.vs.globalMaskTexCoords).x;
]]></CodeInjection>
            <CodeInjection position="POST_DIFFUSE_COLOR_FS"><![CDATA[
#if defined(STATIC_TEST_GEOMETRY)
    diffuseColor = tex2D(baseMap, float2(In.vs.ALBEDOMAP_TEXCOORD)).xyz;
#else
    diffuseColor = tex2D(baseMap, float3(In.vs.ALBEDOMAP_TEXCOORD, globals.groundType-1)).xyz;
#endif
#if defined(USE_GROUND_SHADER_COLOR)
    diffuseColor *= globals.dirt;
#endif
]]></CodeInjection>
            <CodeInjection position="ALPHA_FS"><![CDATA[
#if defined(STATIC_TEST_GEOMETRY)
    alpha = tex2D(baseMap, float2(In.vs.ALBEDOMAP_TEXCOORD)).a;
#else
    alpha = tex2D(baseMap, float3(In.vs.ALBEDOMAP_TEXCOORD, globals.groundType-1)).a;
#endif
]]></CodeInjection>
            <CodeInjection position="GET_UNNORMALIZED_TANGENT_SPACE_NORMAL_FS"><![CDATA[
#if defined(USE_GROUND_SHADER_COLOR)
    #if defined(STATIC_TEST_GEOMETRY)
        return tex2D(normalMap, In.vs.ALBEDOMAP_TEXCOORD).xyz - 0.5;
    #else
        return tex2D(normalMap, float3(In.vs.ALBEDOMAP_TEXCOORD, globals.groundType-1)).xyz - 0.5;
    #endif
#else
    return float3(0,0,0);
#endif
]]></CodeInjection>
            <CodeInjection position="GET_TANGENT_SPACE_NORMAL_FS"><![CDATA[
#if defined(USE_GROUND_SHADER_COLOR)
    return normalize(getUnnormalizedTangentSpaceNormal(In, globals));
#else
    return float3(0,0,0);
#endif
]]></CodeInjection>
            <CodeInjection position="GET_NORMAL_FS"><![CDATA[
{
#if defined(USE_GROUND_SHADER_COLOR)
    float3 normal = getUnnormalizedTangentSpaceNormal(In, globals);
    float3 tangentSpaceNormal = In.vs.worldNormal.xyz;
    float3 tangentSpaceTangent = In.vs.worldTangent.xyz;
    float3 tangentSpaceBitangent = cross(tangentSpaceNormal, tangentSpaceTangent)*In.vs.worldTangent.w;
    float3x3 worldToTangentSpaceMat = float3x3(tangentSpaceTangent, tangentSpaceBitangent, tangentSpaceNormal);
    return normalize(mul(normal.xyz, worldToTangentSpaceMat).xyz);
#else
    return float3(0,0,0);
#endif
}
]]></CodeInjection>
            <CodeInjection position="GET_BUMP_HEIGHT_OFFSETED_FS"><![CDATA[
#if defined(USE_GROUND_SHADER_COLOR)
    #if defined(STATIC_TEST_GEOMETRY)
        return tex2D(normalMap, float2(In.vs.ALBEDOMAP_TEXCOORD + offset)).w;
    #else
        return tex2D(normalMap, float3(In.vs.ALBEDOMAP_TEXCOORD + offset, globals.groundType-1)).w;
    #endif
#else
    return 0.0;
#endif
]]></CodeInjection>
            <CodeInjection position="FINAL_POS_FS"><![CDATA[
//oColor.xyz *= 0.001;
//oColor.xyz += globals.groundType/3;
#if !defined(LIGHTING)
    // alpha 1: always visible, alpha 0: visible after 10cm height
    float visThreshold = saturate(1-alpha - (0.5*(globals.heightNoise-0.55))) * 0.1;

    float vis = (float)(In.vs.deltaHeight > visThreshold) * (float)(globals.groundType > 0) * In.vs.alphaScale;

    clip( vis - 0.001 );
#endif
]]></CodeInjection>
        </CodeInjections>
    </LodLevel>
</CustomShader>
